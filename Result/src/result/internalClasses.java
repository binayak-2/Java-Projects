/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package result;

import com.mysql.jdbc.ResultSetMetaData;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author binayak
 */
public class internalClasses extends javax.swing.JInternalFrame {

    /**
     * Creates new form internalClasses
     */
    public internalClasses() {
        initComponents();
        this.setBorder(null);
        BasicInternalFrameUI ui = (BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
        table_update();
        loadFaculty();
        loadTeacher();
        add.setEnabled(true);
        update.setEnabled(false);
        delete.setEnabled(false);
        
    }
    Connection con;
    PreparedStatement pst;
    ResultSet rs;

    void clear(){
        classname.setText("");
        faculty.setSelectedIndex(0);
        section.setText("");
        teacher.setSelectedIndex(0);
        add.setEnabled(true);
        update.setEnabled(false);
        delete.setEnabled(false);
    }
    
     private void table_update() {
        int CC;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/schoolManagementSystem", "root", "");
            pst = con.prepareStatement("SELECT * FROM Classes");
            rs = pst.executeQuery();

            ResultSetMetaData RSMD = (ResultSetMetaData) rs.getMetaData();
            CC = RSMD.getColumnCount();
            DefaultTableModel DFT = (DefaultTableModel) table.getModel();
            DFT.setRowCount(0);

            while (rs.next()) {
                Vector v2 = new Vector();

                for (int ii = 1; ii <= CC; ii++) {
                    v2.add(rs.getString("id"));
                    v2.add(rs.getString("name"));
                    v2.add(rs.getString("faculty"));
                    v2.add(rs.getString("section"));
                    v2.add(rs.getString("clsteacher"));
                   
                }

                DFT.addRow(v2);
            }
        } catch (Exception e) {
        }
     }
     
     void loadFaculty(){
         
        try {
            
            Class.forName("com.mysql.jdbc.Driver");
             con = DriverManager.getConnection("jdbc:mysql://localhost/schoolManagementSystem", "root", "");
             pst=con.prepareStatement("select distinct name from Faculty");
             rs=pst.executeQuery();
             faculty.removeAllItems();
             while(rs.next()){
                 faculty.addItem(rs.getString("name"));  
             }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(internalClasses.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(internalClasses.class.getName()).log(Level.SEVERE, null, ex);
        }
         
     }
     
     void loadTeacher(){
         try {
            
            Class.forName("com.mysql.jdbc.Driver");
             con = DriverManager.getConnection("jdbc:mysql://localhost/schoolManagementSystem", "root", "");
             pst=con.prepareStatement("select distinct name from Staffs where role = 'Teacher'");
             rs=pst.executeQuery();
             teacher.removeAllItems();
             while(rs.next()){
                 teacher.addItem(rs.getString("name"));  
             }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(internalClasses.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(internalClasses.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        classname = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        faculty = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        section = new javax.swing.JTextField();
        teacher = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        update = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        search = new javax.swing.JTextField();

        setBorder(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Manage Details", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Ubuntu", 0, 12))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel3.setText("Class Name");

        classname.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        classname.setToolTipText("");
        classname.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(22, 50, 89), 1, true));

        jLabel4.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel4.setText("Faculty");

        faculty.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select..." }));
        faculty.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(225, 228, 232), 2, true));
        faculty.setPreferredSize(new java.awt.Dimension(99, 40));

        jLabel5.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel5.setText("Section");

        section.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        section.setToolTipText("");
        section.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(22, 50, 89), 1, true));

        teacher.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        teacher.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(225, 228, 232), 2, true));
        teacher.setPreferredSize(new java.awt.Dimension(99, 40));

        jLabel6.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel6.setText("Class Teacher");

        add.setBackground(new java.awt.Color(254, 254, 254));
        add.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        add.setForeground(new java.awt.Color(1, 1, 1));
        add.setText("Add");
        add.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(225, 228, 232), 2, true));
        add.setBorderPainted(false);
        add.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        update.setBackground(new java.awt.Color(254, 254, 254));
        update.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        update.setForeground(new java.awt.Color(1, 1, 1));
        update.setText("Update");
        update.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(225, 228, 232), 2, true));
        update.setBorderPainted(false);
        update.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        clear.setBackground(new java.awt.Color(254, 254, 254));
        clear.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        clear.setForeground(new java.awt.Color(1, 1, 1));
        clear.setText("Clear");
        clear.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(225, 228, 232), 2, true));
        clear.setBorderPainted(false);
        clear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(254, 254, 254));
        delete.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        delete.setForeground(new java.awt.Color(1, 1, 1));
        delete.setText("Delete");
        delete.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(225, 228, 232), 2, true));
        delete.setBorderPainted(false);
        delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(classname)
                    .addComponent(faculty, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(section)
                    .addComponent(teacher, 0, 375, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(classname, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(faculty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(section, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(teacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        table.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Faculty", "Section", "Class Teacher"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setAutoscrolls(false);
        table.setFocusable(false);
        table.setRowHeight(30);
        table.setShowGrid(true);
        table.setShowVerticalLines(false);
        table.getTableHeader().setReorderingAllowed(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        search.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        search.setText("Search...");
        search.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(22, 50, 89), 1, true));
        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchMouseClicked(evt);
            }
        });
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        
        String cgrade = classname.getText();
        String cfaculty = faculty.getSelectedItem().toString();
        String csect = section.getText();
        String cteach= teacher.getSelectedItem().toString();
        
        if(cgrade.trim().isEmpty()|| csect.trim().isEmpty()){
            
            JOptionPane.showMessageDialog(null, "Details cannot be added. One or more input fields are empty!", "Failed", JOptionPane.ERROR_MESSAGE);
            
        }else{
            
            try {
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost/schoolManagementSystem", "root", "");
                pst = con.prepareStatement("insert into Classes (name,faculty,section,clsteacher)values(?,?,?,?)");
                pst.setString(1, cgrade);
                pst.setString(2, cfaculty);
                pst.setString(3, csect);
                pst.setString(4, cteach);
                pst.executeUpdate();
                table_update();
                JOptionPane.showMessageDialog(null,"Added Successfully!", "Successful", JOptionPane.INFORMATION_MESSAGE);
                clear();
                add.setEnabled(true);
                update.setEnabled(false);
                delete.setEnabled(false);
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, ex);
                //Logger.getLogger(internalClasses.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex);
                //Logger.getLogger(internalClasses.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            
        }
      
    }//GEN-LAST:event_addActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
       
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int selectedIndex = table.getSelectedRow();

        int id = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());
        String cgrade = classname.getText();
        String cfaculty = faculty.getSelectedItem().toString();
        String csect = section.getText();
        String cteach= teacher.getSelectedItem().toString();
        
        if(cgrade.trim().isEmpty()|| csect.trim().isEmpty()){
            
            JOptionPane.showMessageDialog(null, "Details cannot be updated. One or more input fields are empty!", "Failed", JOptionPane.ERROR_MESSAGE);
            
        }else{
            
            try {
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost/schoolManagementSystem", "root", "");
                pst = con.prepareStatement("update Classes set name=?, faculty=?, section=?, clsteacher=? where id=?");
                pst.setString(1, cgrade);
                pst.setString(2, cfaculty);
                pst.setString(3, csect);
                pst.setString(4, cteach);
                pst.setInt(5, id);
                pst.executeUpdate();
                table_update();
                JOptionPane.showMessageDialog(null,"Updated Successfully!", "Successful", JOptionPane.INFORMATION_MESSAGE);
                clear();
                add.setEnabled(true);
                update.setEnabled(false);
                delete.setEnabled(false);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(internalClasses.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(internalClasses.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            
        }
        
    }//GEN-LAST:event_updateActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        
        clear();
        
    }//GEN-LAST:event_clearActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
       
         DefaultTableModel model = (DefaultTableModel) table.getModel();
        int selectedIndex = table.getSelectedRow();

        int id = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());
        int dialogResult = JOptionPane.showConfirmDialog(null,"Are you sure you want to delete?","Confirm Delete",JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.YES_OPTION){
            
             try {
                 
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost/schoolManagementSystem", "root", "");
                pst = con.prepareStatement("delete from Classes where id=?");
                pst.setInt(1, id);
                pst.executeUpdate();
                table_update();
                JOptionPane.showMessageDialog(null,"Deleted Successfully!", "Successful", JOptionPane.INFORMATION_MESSAGE);
                clear();
                add.setEnabled(true);
                update.setEnabled(false);
                delete.setEnabled(false);
                
                 
             } catch (ClassNotFoundException ex) {
                 Logger.getLogger(internalClasses.class.getName()).log(Level.SEVERE, null, ex);
             } catch (SQLException ex) {
                 Logger.getLogger(internalClasses.class.getName()).log(Level.SEVERE, null, ex);
             }
        }
        
    }//GEN-LAST:event_deleteActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseClicked
       
        search.setText("");
    }//GEN-LAST:event_searchMouseClicked

    private void tableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyPressed
        
        
        
    }//GEN-LAST:event_tableKeyPressed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
       
         DefaultTableModel model = (DefaultTableModel) table.getModel();
                 int selectedIndex = table.getSelectedRow();

                classname.setText(model.getValueAt(selectedIndex, 1).toString());
                faculty.setSelectedItem(model.getValueAt(selectedIndex, 2).toString());
                section.setText(model.getValueAt(selectedIndex, 3).toString());
                teacher.setSelectedItem(model.getValueAt(selectedIndex, 4).toString());
                
                add.setEnabled(false);
                update.setEnabled(true);
                delete.setEnabled(true);
        
    }//GEN-LAST:event_tableMouseClicked

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased


        
        
    }//GEN-LAST:event_searchKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JTextField classname;
    private javax.swing.JButton clear;
    private javax.swing.JButton delete;
    private javax.swing.JComboBox<String> faculty;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField search;
    private javax.swing.JTextField section;
    private javax.swing.JTable table;
    private javax.swing.JComboBox<String> teacher;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
